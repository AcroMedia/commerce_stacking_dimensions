<?php

/**
 * @file
 * Declares the paths for the UI and holds all functions.
 */

/**
 * Implements hook_menu().
 */
function commerce_stacking_dimensions_menu() {
  $items = array();

  $items['admin/commerce/config/stacking'] = array(
    'title' => 'Stacking Products',
    'description' => 'Choose product types to enable a stacking mode during
                      dimension calculations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_stacking_dimensions_form'),
    'access arguments' => array('configure store'),
  );

  return $items;
}

/**
 * Returns the form for editing the product types that can be stacked.
 *
 * @param array $form
 *   A form object.
 * @param array $form_state
 *   The updated object if loaded after being submitted.
 *
 * @return mixed
 *   Returns the final form structure.
 */
function commerce_stacking_dimensions_form($form, &$form_state) {

  $form['description'] = array(
    '#markup' => '<p>' . t('Choose product types to add stacking dimension
                            fields that track how a single product\'s dimensions
                            change when stacked as a quantity of more than
                            one. Note: This is not meant to work with stacking
                            multiple kinds of products together.') . '</p>',
  );

  // Load product types and simplify.
  $product_types = commerce_product_types();
  foreach ($product_types as $id => $type) {
    $product_types[$id] = $type['name'];
  }

  $form['commerce_stacking_dimensions_product_types'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Product Types',
    '#options' => $product_types,
    '#default_value' => variable_get('commerce_stacking_dimensions_product_types', array()),
    '#description' => '<br><hr><br><em>'.t('WARNING: Unchecking a particular product type and 
                         saving the changes <strong>WILL</strong> remove the stacking dimension
                         fields and data. This is your only warning.').'</em>',
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Save Changes'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function commerce_stacking_dimensions_form_submit($form, &$form_state) {
  $old = variable_get('commerce_stacking_dimensions_product_types', array());
  $new = array_filter($form_state['values']['commerce_stacking_dimensions_product_types']);
  variable_set('commerce_stacking_dimensions_product_types', $new);

  // Delete field instances that are attached to old and not in new.
  $remove = array_diff($old, $new);
  if ($remove) {
    foreach ($remove as $bundle) {
      $instance = field_info_instance('commerce_product', 'stacking_dimensions', $bundle);
      field_delete_instance($instance, FALSE);
    }
    drupal_set_message(format_plural(count($remove),"The stacking dimension field on @bundles was removed.",
      "The stacking dimension field on the following @count bundles were removed: @bundles",array('@bundles' => implode(", ", $remove))), 'status');
  }

  // Add field instances to new and not in old.
  $add = array_diff($new, $old);
  if ($add) {
    foreach ($add as $bundle) {
      field_create_instance(array(
        "label" => "Stacking Dimensions",
        "field_name" => "stacking_dimensions",
        "entity_type" => "commerce_product",
        "bundle" => $bundle,
      ));
    }
    drupal_set_message(format_plural(count($add),"@bundles now has a stacking dimension field.",
      "A new stacking dimension field was added to these @count bundles: @bundles",array('@bundles' => implode(", ", $add))), 'status');
  }
}

/**
 * Implements hook_commerce_physical_order_volume_alter().
 */
function commerce_stacking_dimensions_commerce_physical_order_volume_alter(&$volume, $order, $unit) {
  // Skip our reset if there is no volume.
  if ($volume === NULL) {
    return;
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $volume = NULL;

  // Loop over each line item on the order.
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    // Get the dimensions value of product line items.
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $line_item_dimensions = commerce_physical_product_line_item_dimensions($line_item_wrapper->value());

      // Add it to the running total converting it to the required weight unit.
      if (!physical_field_is_empty($line_item_dimensions, array('type' => 'physical_dimensions'))) {
        $product_dimensions = physical_dimensions_convert($line_item_dimensions, $unit);
        $quantity = $line_item_wrapper->quantity->value();

        // Step 1: Determine if more than one, possible stacking line item.
        if (round($quantity, 0) > 1) {
          // Step 2: Determine if product type has stacking dimensions field.
          if (array_key_exists("stacking_dimensions", $line_item_wrapper->commerce_product->getPropertyInfo())) {
            // Step 3: Review dimensions that change per quantity.
            $stacking_dimensions = $line_item_wrapper->commerce_product->stacking_dimensions->value();
            // Convert to same unit as line item.
            $stacking_dimensions = physical_dimensions_convert($stacking_dimensions, $unit);

            // To figure out our new volume, we have to know how many unstacked
            // products we will need to put in packages. Ultimately, this should
            // come from a settings page and not an assumption of UPS.
            $default_package['length'] = variable_get('commerce_ups_default_package_size_length', '0');
            $default_package['width'] = variable_get('commerce_ups_default_package_size_width', '0');
            $default_package['height'] = variable_get('commerce_ups_default_package_size_height', '0');
            $default_package_volume =  $default_package['length'] * $default_package['width'] * $default_package['height'];

            $full_package_dimensions = $product_dimensions; // start with whole product

            $whole_packages = 1;

            // Foreach quantity, determine the volume and add either a stacking
            // dimension or a full product.
            for ($stacked_products = 0; $stacked_products < $quantity; $stacked_products++) {
              // Our newest dimensions will change our volume
              $new_dimensions = $full_package_dimensions;
              $new_dimensions['length'] += $stacking_dimensions['length'];
              $new_dimensions['height'] += $stacking_dimensions['height'];
              $new_dimensions['width'] += $stacking_dimensions['width'];
              $new_volume = $new_dimensions['length'] * $new_dimensions['width'] * $new_dimensions['height'];

              // If the new volume won't fit, then we now know how many products
              // we can stack per default package.
              if ($new_volume > $default_package_volume) {
                break;
              } else {
                $full_package_dimensions = $new_dimensions;
              }
            }
            // If the number of products would stack more than the default volume,
            // we determine how many packages we would end up with based on the
            // number of packages that would fit. (10 would fit, but we have 23,
            // so the $whole_packages = 2.3, in other words, we would require 3
            // packages to fit all of the products.)
            if ($quantity > $stacked_products) {
              $products_per_default_package = $stacked_products + 1;
              $whole_packages = ceil($quantity / $products_per_default_package);
              // Divide all stacked products across all whole packages.
              // Since we can't cut products, we have to assume we have enough
              // to always over stack by 1 for each package. This will inflate
              // the volume, but the alternative is to estimate less than
              // reality. We are erring on the side of more, not less.
              $evenly_distributed_stacked_products = ceil($stacked_products / $whole_packages);
            } else {
              $evenly_distributed_stacked_products = $stacked_products;
            }

            // Reset dimensions to include stacked per package.
            // For example, 10 products can fit into a default package, and we
            // now know we need 3 default packages to fit all quantity.
            // So the new product dimensions is the full product plus the 4
            // evenly distributed stacked dimensions across the 3 sets of stacked
            // products. 1 original height + (stacked height * 4)
            foreach (array("length","width","height") as $type) {
              if ($stacking_dimensions[$type] > 0) {
                $product_dimensions[$type] += $stacking_dimensions[$type] * $evenly_distributed_stacked_products;
              }
            }
            // Reset quantity to the "evenly distributed" packages in order to
            // reflect that the new dimensions include X number of products.
            $quantity = $whole_packages;
          }
        }

        $product_dimensions['volume'] = $product_dimensions['width'] * $product_dimensions['length'] * $product_dimensions['height'] * $quantity;

        if (empty($volume['volume'])) {
          // Create a volume value array using the converted unit type.
          $volume = array(
            'volume' => $product_dimensions['volume'],
            'unit' => $unit,
          );
        }
        else {
          $volume['volume'] += $product_dimensions['volume'];
        }
      }
    }
    // No return needed, &$volume is going to be returned by the original hook.
  }

  // Allow other modules to hook in and alter the volume.
  drupal_alter('order_volume', $volume, $order, $unit);
}
